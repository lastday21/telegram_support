"""
Unit-—Ç–µ—Å—Ç—ã –¥–ª—è interfaces.hotkeys.listener.

–ü–æ–∫—Ä—ã–≤–∞–µ–º:
    ‚Ä¢ _toggle_rec()  ‚Äî —Å–Ω–∞—á–∞–ª–∞ start ‚Üí –∑–∞—Ç–µ–º stop
    ‚Ä¢ _handler()     ‚Äî —Å–∫—Ä–∏–Ω—à–æ—Ç, OCR, GPT, Telegram
"""

import importlib
import types
import pytest


# ---------------------------------------------------------------------
@pytest.fixture
def listener(monkeypatch, tmp_path):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏ –ø–æ–¥–º–µ–Ω—è–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (mod, ctx), –≥–¥–µ ctx ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—á—ë—Ç—á–∏–∫–∞–º–∏ –≤—ã–∑–æ–≤–æ–≤/–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    """
    ctx = {
        "rec_started": False,
        "rec_stopped": False,
        "messages": [],
        "photos": [],
        "solve_text": [],
        "solve_image": [],
    }

    # --------- Fake VoiceRecorder ------------------------------------
    class _FakeRec:
        def __init__(self):
            self.wav = tmp_path / "fake.wav"
            self.wav.write_bytes(b"RIFF....WAVEfmt")  # –ø—Å–µ–≤–¥–æ-—Ñ–∞–π–ª

        def start(self):
            ctx["rec_started"] = True

        def stop(self):
            ctx["rec_stopped"] = True
            return self.wav

    # --------- Fake Telegram ----------------------------------------
    def _fake_send_msg(txt):
        ctx["messages"].append(txt)

    def _fake_send_photo(photo, caption=None):
        ctx["photos"].append((photo, caption))

    # --------- Fake STT / GPT ---------------------------------------
    def _fake_transcribe(wav):
        return "hello world"

    def _fake_solve_text(text):
        ctx["solve_text"].append(text)
        return "AI ANSWER"

    def _fake_solve_image(img, prompt):
        ctx["solve_image"].append((img, prompt))
        return "IMG ANSWER"

    # --------- Fake screenshot & OCR --------------------------------
    def _fake_take_screenshot(*a, **kw):
        return b"PNG_BYTES"

    fake_pil_img = types.SimpleNamespace(open=lambda buf: object())
    fake_tess = types.SimpleNamespace(image_to_string=lambda *a, **k: "OCR TEXT")

    # --------- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏ —Å—Ç–∞–≤–∏–º –º–æ–∫–∏ ----------------------
    mod = importlib.import_module("src.interfaces.hotkeys.listener")

    monkeypatch.setattr(mod, "_rec", _FakeRec())
    monkeypatch.setattr(mod, "send_message", _fake_send_msg)
    monkeypatch.setattr(mod, "send_photo", _fake_send_photo)
    monkeypatch.setattr(mod, "transcribe", _fake_transcribe)
    monkeypatch.setattr(mod, "solve_text", _fake_solve_text)
    monkeypatch.setattr(mod, "solve_image", _fake_solve_image)
    monkeypatch.setattr(mod, "take_screenshot", _fake_take_screenshot)
    monkeypatch.setattr(mod, "Image", fake_pil_img)
    monkeypatch.setattr(mod, "pytesseract", fake_tess)

    mod._is_recording = False

    return mod, ctx


# ---------------------------------------------------------------------
def test_toggle_rec_start_and_stop(listener):
    """–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ _toggle_rec() –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å—å, –≤—Ç–æ—Ä–æ–π ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç."""
    mod, ctx = listener

    # ---- —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏ ----
    mod._toggle_rec()
    assert ctx["rec_started"] is True
    assert mod._is_recording is True
    # –ù–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    assert ctx["messages"] == []

    # ---- —Å—Ç–æ–ø –∑–∞–ø–∏—Å–∏ ----
    mod._toggle_rec()
    assert ctx["rec_stopped"] is True
    assert mod._is_recording is False
    # –î–æ–ª–∂–Ω—ã –ø—Ä–∏–ª–µ—Ç–µ—Ç—å 2 —Å–æ–æ–±—â–µ–Ω–∏—è: ¬´–≤—ã —Å–∫–∞–∑–∞–ª–∏ ‚Ä¶¬ª –∏ –æ—Ç–≤–µ—Ç GPT
    assert len(ctx["messages"]) == 2
    assert ctx["messages"][0].startswith("üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏:")
    assert ctx["messages"][1].startswith("üí°")
    # solve_text –ø–æ–ª—É—á–∏–ª –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π prompt
    assert ctx["solve_text"] and "hello world" in ctx["solve_text"][0]


def test_handler_screenshot_flow(listener):
    """_handler() –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ ‚Üí GPT-–æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º."""
    mod, ctx = listener

    mod._handler("PROMPT_X")

    # –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    assert ctx["photos"] and ctx["photos"][0][0] == b"PNG_BYTES"
    # solve_image –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–º –∂–µ prompt
    assert ctx["solve_image"] and ctx["solve_image"][0][1] == "PROMPT_X"
    # –í Telegram —É—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç
    assert ctx["messages"][-1] == "IMG ANSWER"
