"""
–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. solve_text()      ‚Äì –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç ‚Üí early-return; –¥–ª–∏–Ω–Ω—ã–π ‚Üí –∑–æ–≤—ë—Ç _gpt_request.
2. solve_image()     ‚Äì OCR + GPT: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è pytesseract –∏ _gpt_request c –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º prompt.

–í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (HTTP, Pillow, Tesseract) –º–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ–±—ã
—Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω –∏ –±—ã—Å—Ç—Ä–æ.
"""

import types
import src.infra.yandex_gpt as gpt


def test_solve_text_too_short():
    """–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ < 3 —Å–∏–º–≤. ‚Üí —Å—Ä–∞–∑—É ü§∑ –±–µ–∑ –≤—ã–∑–æ–≤–∞ GPT."""
    assert (
        gpt.solve_text("ok")  # 2 —Å–∏–º–≤–æ–ª–∞
        == "ü§∑ –ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)."  # –æ–∂–∏–¥–∞–µ–º—ã–π early-return
    )


def test_solve_text_calls_gpt(monkeypatch):
    """solve_text() –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ _gpt_request –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –æ—Ç–≤–µ—Ç."""
    call = {}

    def _fake_req(user_text, system_prompt, temperature):
        call["args"] = (user_text, system_prompt, temperature)
        return "ANSWER"

    monkeypatch.setattr(gpt, "_gpt_request", _fake_req)

    out = gpt.solve_text("How to sort list?")
    assert out == "ANSWER" and "args" in call


class _FakeImg:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ pytesseract.image_to_string."""

    pass


def test_solve_image_success(monkeypatch):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π OCR ‚Üí —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π prompt –∏ –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å –∫ GPT."""
    calls = {}

    # --- –º–æ–∫–∞–µ–º Image.open ----------------------------------------------------
    def _fake_open(fp):
        calls["image_opened"] = True
        return _FakeImg()

    monkeypatch.setattr(gpt, "Image", types.SimpleNamespace(open=_fake_open))

    def _fake_ocr(img, lang, config):
        calls["ocr_called"] = True
        return "SELECT * FROM table;"

    monkeypatch.setattr(
        gpt,
        "pytesseract",
        types.SimpleNamespace(image_to_string=_fake_ocr),
    )

    def _fake_req(user_text, system_prompt, temperature=0.3):
        calls["prompt"] = user_text
        return "SQL explanation"

    monkeypatch.setattr(gpt, "_gpt_request", _fake_req)

    result = gpt.solve_image(b"bytes", prompt="–û–±—ä—è—Å–Ω–∏ SQL")

    assert result == "SQL explanation"

    assert "–û–±—ä—è—Å–Ω–∏ SQL" in calls["prompt"] and "SELECT *" in calls["prompt"]
    assert calls.get("ocr_called") and calls.get("image_opened")


def test_solve_image_no_text(monkeypatch):
    """–ö–æ–≥–¥–∞ OCR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–µ–∫—Å—Ç ‚Üí —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    monkeypatch.setattr(
        gpt,
        "Image",
        types.SimpleNamespace(open=lambda fp: _FakeImg()),
    )
    monkeypatch.setattr(
        gpt,
        "pytesseract",
        types.SimpleNamespace(image_to_string=lambda *a, **kw: ""),
    )

    assert gpt.solve_image(b"bytes") == "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
