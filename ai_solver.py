from io import BytesIO
from typing import Union
import requests
from config import YC_API_KEY, YC_FOLDER_ID


API_URL   = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
MODEL_URI = f"gpt://{YC_FOLDER_ID}/yandexgpt-lite/latest"
HEADERS   = {
    "Authorization": f"Api-Key {YC_API_KEY}",
    "Content-Type":  "application/json"
}
DEFAULT_SYSTEM = (
    "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –Ω–∞ mock-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏: –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø—Ä–æ—Å—Ç–æ, "
    "–¥–æ—Å—Ç—É–ø–Ω—ã–º —è–∑—ã–∫–æ–º, –±–µ–∑ –ª–∏—à–Ω–µ–π ¬´–≤–æ–¥—ã¬ª."
)

# --- —Ñ—É–Ω–∫—Ü–∏–∏ -----------------------------------------------------------------
def _gpt_request(user_text: str, system_prompt: str, temperature: float = 0.3) -> str:
    body = {
        "modelUri": MODEL_URI,
        "completionOptions": {
            "stream": False,
            "temperature": temperature,
            "maxTokens": 700
        },
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user",   "text": user_text}
        ]
    }
    resp = requests.post(API_URL, headers=HEADERS, json=body, timeout=120)
    resp.raise_for_status()
    return resp.json()["result"]["alternatives"][0]["message"]["text"].strip()


def solve_text(user_text: str,
               system_prompt: str = DEFAULT_SYSTEM,
               temperature: float = 0) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ Yandex GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    if len(user_text.strip()) < 3:
        return "ü§∑ –ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å (—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)."
    try:
        return _gpt_request(user_text, system_prompt, temperature)
    except Exception as e:
        return f"üõë –û—à–∏–±–∫–∞ Yandex GPT: {e}"



import pytesseract
from PIL import Image
from pathlib import Path

def solve_image(image: Union[str, bytes],
                prompt: str = "–û–±—ä—è—Å–Ω–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏") -> str:
    """
    –î–µ–ª–∞–µ—Ç OCR –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ—Ç prompt + –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Yandex GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    try:
        if isinstance(image, bytes):
            img = Image.open(BytesIO(image))
        else:
            img = Image.open(Path(image))
        text = pytesseract.image_to_string(
            img, lang="rus+eng", config="--oem 3 --psm 6"
        ).strip()
        if not text:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        combined = f"{prompt}\n\n{text}"
        return _gpt_request(combined, DEFAULT_SYSTEM)
    except Exception as e:
        return f"üõë OCR/Yandex GPT error: {e}"