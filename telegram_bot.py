"""
–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–æ–¥—É–ª—è ‚Äî –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è,
–∞ –∑–∞—Ç–µ–º –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å ¬´—Ç—è–∂—ë–ª—ã–µ¬ª –æ–ø–µ—Ä–∞—Ü–∏–∏ (GPT-–æ—Ç–≤–µ—Ç, STT-—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É,
OCR-–∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ —Ç. –¥.) –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è
–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π event-loop –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ **python-telegram-bot**.
"""
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.request import HTTPXRequest

from config import TG_BOT_TOKEN
from ai_solver import solve_text
from hotkey_listener import PROMPTS  # —Å–ø–∏—Å–æ–∫ Alt+1‚Ä¶9


request = HTTPXRequest(connect_timeout=20, read_timeout=20)

app = (
    ApplicationBuilder()
    .token(TG_BOT_TOKEN)
    .request(request)
    .concurrent_updates(True)  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    .build()
)


HELP = (
    "/help ‚Äì —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
    "/prompts ‚Äì —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (Alt+1‚Ä¶9)\n"
    "/p <n> ‚Äì –æ—Ç–≤–µ—Ç –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ ‚Ññn\n"
    "–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Üí –æ—Ç–≤–µ—Ç GPT."
)
THINKING = "‚åõ¬†–î—É–º–∞—é‚Ä¶"
BULB = "üí°¬†"


async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """/help ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞."""
    await update.message.reply_text(HELP)


async def cmd_prompts(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """/prompts ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ Alt+1‚Ä¶9."""
    txt = "\n".join(
        f"{i}. {p.splitlines()[0][:60]}‚Ä¶" for i, p in enumerate(PROMPTS, 1)
    )
    await update.message.reply_text(txt)


async def cmd_p(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """/p <n> ‚Äî –æ—Ç–≤–µ—Ç GPT –ø–æ –≥–æ—Ç–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–µ ‚Ññn (1‚Äì9)."""
    try:
        n = int(ctx.args[0])
        assert 1 <= n <= len(PROMPTS)
    except (IndexError, ValueError, AssertionError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /p <1-9>")
        return

    await update.message.reply_text(THINKING)

    # solve_text –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ ‚Üí –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º event‚Äëloop
    answer = await ctx.application.run_async(solve_text, PROMPTS[n - 1])
    await update.message.reply_text(f"{BULB}{answer}")



async def on_msg(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ GPT."""
    await update.message.reply_text(THINKING)

    answer = await ctx.application.run_async(solve_text, update.message.text)
    await update.message.reply_text(f"{BULB}{answer}")



app.add_handler(CommandHandler(["start", "help"], cmd_help))
app.add_handler(CommandHandler("prompts", cmd_prompts))
app.add_handler(CommandHandler("p", cmd_p))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_msg))



def main() -> None:
    """Starts polling; responds to Ctrl+C (SIGINT) as usual."""
    app.run_polling()


if __name__ == "__main__":
    main()
