"""
–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–æ–¥—É–ª—è ‚Äî –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è,
–∞ –∑–∞—Ç–µ–º –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ (GPT-–æ—Ç–≤–µ—Ç, OCR –∏ —Ç. –¥.) –≤ —Ñ–æ–Ω–æ–≤–æ–º
–ø–æ—Ç–æ–∫–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è event-loop python-telegram-bot.
"""

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.request import HTTPXRequest
import asyncio

from src.settings import TG_BOT_TOKEN
from src.infra.yandex_gpt import solve_text
from src.interfaces.hotkeys.listener import PROMPTS

request = HTTPXRequest(connect_timeout=20, read_timeout=20)
app = ApplicationBuilder().token(TG_BOT_TOKEN).request(request).build()

HELP = (
    "/help ‚Äì —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
    "/prompts ‚Äì —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (Alt+1‚Ä¶9)\n"
    "/p <n> ‚Äì –æ—Ç–≤–µ—Ç –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ ‚Ññn\n"
    "–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Üí –æ—Ç–≤–µ—Ç GPT."
)
THINKING = "‚åõ –î—É–º–∞—é‚Ä¶"
BULB = "üí° "


async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if msg is None:
        return
    await msg.reply_text(HELP)


async def cmd_prompts(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if msg is None:
        return
    txt = "\n".join(f"{i}. {p.splitlines()[0][:60]}‚Ä¶" for i, p in enumerate(PROMPTS, 1))
    await msg.reply_text(txt)


async def cmd_p(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if msg is None:
        return

    args = ctx.args or []
    if not args or not args[0].isdigit():
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /p <1-9>")
        return

    n = int(args[0])
    if not 1 <= n <= len(PROMPTS):
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /p <1-9>")
        return

    await msg.reply_text(THINKING)
    loop = asyncio.get_running_loop()
    answer = await loop.run_in_executor(None, solve_text, PROMPTS[n - 1])
    await msg.reply_text(f"{BULB}{answer}")


async def on_msg(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if msg is None or msg.text is None:
        return

    await msg.reply_text(THINKING)
    text = msg.text
    loop = asyncio.get_running_loop()
    answer = await loop.run_in_executor(None, solve_text, text)
    await msg.reply_text(f"{BULB}{answer}")


app.add_handler(CommandHandler(["start", "help"], cmd_help))
app.add_handler(CommandHandler("prompts", cmd_prompts))
app.add_handler(CommandHandler("p", cmd_p))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_msg))


def main() -> None:
    app.run_polling()


if __name__ == "__main__":
    main()
