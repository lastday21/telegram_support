import threading
import keyboard
from PIL import Image
import pytesseract
import os

from src.domain.audio.recorder import VoiceRecorder
from src.infra.yandex_stt import transcribe
from src.infra.yandex_gpt import solve_text, solve_image
from src.interfaces.telegram.sender import send_message, send_photo
from src.domain.ocr.capture import take_screenshot
from io import BytesIO
from src.infra.audio_devices import pick_default_devices


FIXED_PROMPT = "–†–∞—Å—Å–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É/–Ω–∞–ø–∏—à–∏ –∫–æ–¥: "


def _resolve_devices() -> tuple[str, str]:
    """–ë–µ—Ä—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ ENV, –∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –∏—â–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
    mic_env = os.getenv("MIC_DEVICE")
    mix_env = os.getenv("MIX_DEVICE")
    if mic_env and mix_env:
        return mic_env, mix_env
    return pick_default_devices()


MIC_DEVICE, MIX_DEVICE = _resolve_devices()
_rec = VoiceRecorder(mic_device=MIC_DEVICE, mix_device=MIX_DEVICE)
# MIC_DEVICE = (
#     "@device_cm_{33D9A762-90C8-11D0-BD43-00A0C911CE86}\\"
#     "wave_{EBB798E2-2326-4DC4-A40F-5BD075C42CDC}"
# )
# MIX_DEVICE = (
#     "@device_cm_{33D9A762-90C8-11D0-BD43-00A0C911CE86}\\"
#     "wave_{108367BD-4575-4D6D-9B91-5AF7AF0FBEA9}"
# )
#
# _rec = VoiceRecorder(
#     mic_device="–ù–∞–±–æ—Ä –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ (–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è Intel¬Æ Smart Sound –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤)",
#     mix_device="–°—Ç–µ—Ä–µ–æ –º–∏–∫—à–µ—Ä (Realtek(R) Audio)",
# )
_is_recording = False


def _toggle_rec():
    global _is_recording
    wav = None
    try:
        if not _is_recording:
            _rec.start()
            _is_recording = True
            print("üéô –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å (Alt+Q ‚Äî —Å—Ç–æ–ø)")
        else:
            wav = _rec.stop()
            _is_recording = False

            text = transcribe(wav)
            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text or '<–ø—É—Å—Ç–æ>'}")
            if not text.strip():
                return

            send_message(f"üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏:\n{text}")
            answer = solve_text(FIXED_PROMPT + text)
            send_message(f"üí° {answer}")

    except Exception:
        import traceback

        print("\n‚Äî‚Äî ERROR audio-module ‚Äî‚Äî‚Äî")
        traceback.print_exc()
        print("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n")

    finally:
        if wav is not None and wav.exists():
            wav.unlink(missing_ok=True)


def _handler(prompt: str):
    try:
        img_bytes = take_screenshot()
        send_photo(img_bytes, caption=prompt)

        ocr_text = pytesseract.image_to_string(
            Image.open(BytesIO(img_bytes)), lang="rus+eng", config="--oem 3 --psm 6"
        ).strip()

        print("\n===== AI INPUT =====")
        print(prompt, ocr_text, sep="\n")
        print("===== END INPUT =====\n")

        answer = solve_image(img_bytes, prompt)
        send_message(answer)
    except Exception as exc:
        import traceback

        traceback.print_exc()
        send_message(f"üö® ERROR screenshot-module: {exc}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ Alt+1‚Ä¶9  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PROMPTS = [
     """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–º—É —Ç–∏–ø—É –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è: —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –≤—Ö–æ–¥, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–µ –∏ –∫–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –µ—Å—Ç—å? –û–±—ä—è—Å–Ω–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –û–ø–∏—à–∏, –∫–∞–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ—ë —Ä–µ—à–µ–Ω–∏—è: –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ—á–µ–º—É –µ–≥–æ —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å? –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –ö–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏ –ø–æ—á–µ–º—É? –ü–æ–∫–∞–∂–∏ –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–º–µ—Ä –≤ –∫–æ–¥–µ.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –†–∞–∑–±–µ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–µ —à–∞–≥–∏: –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π —à–∞–≥ –∏ –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –ø–æ —á–∞—Å—Ç—è–º, –∞ –≤ –∫–æ–Ω—Ü–µ —Å–æ–±–µ—Ä–∏ –ø–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –û–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏, –∫–∞–∫ –µ–≥–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏ –±–æ–ª—å—à–µ–º –≤—Ä–µ–º–µ–Ω–∏.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –ø—É–Ω–∫—Ç–∞–º, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å –µ–≥–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –∫–∞–∂–¥–æ–º—É –≤–∞–∂–Ω–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É.""",
    """–£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–µ–±–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ backend –Ω–∞ Python. –ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –∑–∞–¥–∞—Ç—å –ø–æ —ç—Ç–æ–º—É —Ä–µ—à–µ–Ω–∏—é, –∏ –¥–∞–π –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.""",
]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–æ—Ç–∫–µ–µ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    print("–ì–æ—Ç–æ–≤–æ!  Alt+Q ‚Äî –∞—É–¥–∏–æ,  Alt+1‚Ä¶Alt+9 ‚Äî —Å–∫—Ä–∏–Ω—à–æ—Ç + GPT")

    keyboard.add_hotkey(
        "alt+q", lambda: threading.Thread(target=_toggle_rec, daemon=True).start()
    )
    for i, prm in enumerate(PROMPTS, start=1):
        keyboard.add_hotkey(
            f"alt+{i}",
            lambda p=prm: threading.Thread(
                target=_handler, args=(p,), daemon=True
            ).start(),
        )
    keyboard.wait()


if __name__ == "__main__":
    main()
